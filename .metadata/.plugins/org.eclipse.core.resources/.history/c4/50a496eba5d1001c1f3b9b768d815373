package chat;

import chef.Chef;
import customer.Customer;
import postTraining.Restaurant;
import waiter.Waiter;

import waiter.State1Idle;

public class Chat extends Mediator{
	
	int state;
	
	Restaurant restaurant = Restaurant.getInstance();


	public Customer getCustomer() {
		return customer;
	}
	public void setCustomer(Customer customer) {
		this.customer = customer;
		customer.chat = this;
	}
	public void removeCustomer() {
		if(customer == null) return;
		customer.chat = null;
		customer = null;
	}
	public Waiter getWaiter() {
		return waiter;
	}
	public void setWaiter(Waiter waiter) {
		this.waiter = waiter;
		waiter.chat = this;
	}
	public void removeWaiter() {
		if(waiter == null) return;
		waiter.chat = null;
		waiter = null;
	}
	public Chef getChef() {
		return chef;
	}
	public void setChef(Chef chef) {
		this.chef = chef;
		chef.chat = this;
	}
	public void removeChef() {
		if(chef == null) return;
		chef.chat = null;
		chef = null;
	}
	
	// called when new customer generated
	public void init(Customer customer) {
		setCustomer(customer);
		restaurant.assignWaiter(this);
		state = 1;
	}
	// 1 0 0

	// called in restaurant
	public void getWaiter(Waiter waiter) {
		setWaiter(waiter);
		customer.getState().changeState();
		waiter.getState().changeState();
		state++;
	}
	// 2 2 0

	// called from state2 waiter
	public void doneOrdering() {
		customer.getState().changeState();
		waiter.getState().changeState();
		state++;
	}
	// 3 3 0
	
	public void bringToChef() {
		waiter.getState().changeState();
		Restaurant.getInstance().assignChef(this);
		state++;
	}
	// 3 4 0

	// this is called from restaurant
	public void startCooking(Chef chef) {
		setChef(chef);
		customer.getState().changeState();
		waiter.getState().changeState();
		removeWaiter();
		chef.getState().changeState();
		state++;
	}
	// 4 0 2
	
	// called from chef when done cooking
	public void doneCooking() {
		chef.getState().changeState();
		removeChef();
		Restaurant.getInstance().assignWaiter(this);
	}
	// 4 0 3->0

	// this is called from restaurant when waiter is assigned*
	public void waiterToCustomer() {
		customer.getState().changeState();
		((State1Idle)waiter.getState()).changeState5();
		state++;
	}
	// 5 5 0

	public void startEating() {
		customer.getState().changeState();
		waiter.getState().changeState();
		removeWaiter();
		state++;
	}
	// 6 6->0 0

public void doneEating() {
		// destroy this
	}



}
